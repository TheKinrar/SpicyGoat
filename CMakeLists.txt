cmake_minimum_required(VERSION 3.13)
project(SpicyGoat)

set(CMAKE_CXX_STANDARD 17)

find_package(nlohmann_json 3.6.1 REQUIRED)

add_subdirectory(libnbtplusplus)

add_executable(SpicyGoat main.cpp TCPServer.cpp TCPServer.h TCPConnection.cpp TCPConnection.h protocol/PacketData.cpp protocol/PacketData.h protocol/packets/Packet.cpp protocol/packets/Packet.h protocol/packets/handshake/PacketHandshake.cpp protocol/packets/handshake/PacketHandshake.h protocol/ConnectionState.h protocol/packets/status/PacketRequest.cpp protocol/packets/status/PacketRequest.h protocol/packets/status/PacketResponse.cpp protocol/packets/status/PacketResponse.h protocol/packets/ServerBoundPacket.cpp protocol/packets/ServerBoundPacket.h protocol/packets/ClientBoundPacket.cpp protocol/packets/ClientBoundPacket.h protocol/packets/status/PacketPing.cpp protocol/packets/status/PacketPing.h protocol/packets/status/PacketPong.cpp protocol/packets/status/PacketPong.h protocol/packets/login/PacketLoginStart.cpp protocol/packets/login/PacketLoginStart.h protocol/packets/login/PacketLoginStart.cpp protocol/packets/login/PacketLoginStart.h protocol/packets/login/PacketLoginSuccess.cpp protocol/packets/login/PacketLoginSuccess.h protocol/packets/play/clientbound/PacketJoinGame.cpp protocol/packets/play/clientbound/PacketJoinGame.h entities/Entity.cpp entities/Entity.h entities/EntityPlayer.cpp entities/EntityPlayer.h Server.cpp Server.h protocol/packets/play/clientbound/PacketPluginMessageCB.cpp protocol/packets/play/clientbound/PacketPluginMessageCB.h protocol/channels/ChannelMessage.cpp protocol/channels/ChannelMessage.h protocol/channels/minecraft/CMBrand.cpp protocol/channels/minecraft/CMBrand.h protocol/packets/play/clientbound/PacketServerDifficulty.cpp protocol/packets/play/clientbound/PacketServerDifficulty.h protocol/packets/play/clientbound/PacketSpawnPosition.cpp protocol/packets/play/clientbound/PacketSpawnPosition.h world/geo/Position.cpp world/geo/Position.h protocol/packets/play/clientbound/PacketPlayerAbilities.cpp protocol/packets/play/clientbound/PacketPlayerAbilities.h protocol/packets/play/serverbound/PacketClientSettings.cpp protocol/packets/play/serverbound/PacketClientSettings.h protocol/packets/play/serverbound/PacketPluginMessageSB.cpp protocol/packets/play/serverbound/PacketPluginMessageSB.h protocol/packets/play/clientbound/PacketPlayerLocationCB.cpp protocol/packets/play/clientbound/PacketPlayerLocationCB.h world/geo/Location.cpp world/geo/Location.h protocol/packets/play/serverbound/PacketTeleportConfirm.cpp protocol/packets/play/serverbound/PacketTeleportConfirm.h protocol/packets/play/serverbound/PacketPlayerPositionLook.cpp protocol/packets/play/serverbound/PacketPlayerPositionLook.h protocol/packets/play/serverbound/PacketClientStatus.cpp protocol/packets/play/serverbound/PacketClientStatus.h protocol/packets/play/clientbound/PacketChunkData.cpp protocol/packets/play/clientbound/PacketChunkData.h world/chunks/ChunkColumn.cpp world/chunks/ChunkColumn.h world/chunks/Chunk.cpp world/chunks/Chunk.h protocol/packets/play/serverbound/PacketPlayerPosition.cpp protocol/packets/play/serverbound/PacketPlayerPosition.h protocol/packets/play/serverbound/PacketPlayerLook.cpp protocol/packets/play/serverbound/PacketPlayerLook.h protocol/packets/play/clientbound/PacketKeepAliveCB.cpp protocol/packets/play/clientbound/PacketKeepAliveCB.h protocol/packets/play/serverbound/PacketKeepAliveSB.cpp protocol/packets/play/serverbound/PacketKeepAliveSB.h world/World.cpp world/World.h world/chunks/Region.cpp world/chunks/Region.h world/geo/Position2D.cpp world/geo/Position2D.h protocol/packets/play/clientbound/PacketUnloadChunk.cpp protocol/packets/play/clientbound/PacketUnloadChunk.h protocol/packets/play/serverbound/PacketEntityAction.cpp protocol/packets/play/serverbound/PacketEntityAction.h protocol/packets/play/serverbound/PacketPlayerAbilitiesSB.cpp protocol/packets/play/serverbound/PacketPlayerAbilitiesSB.h world/chunks/ChunkPalette.cpp world/chunks/ChunkPalette.h world/blocks/BlockState.cpp world/blocks/BlockState.h)
target_link_libraries(SpicyGoat PRIVATE nlohmann_json::nlohmann_json uuid pthread nbt++)